{"version":3,"sources":["apollo/client.js","component/WithCollapse/WithCollapse.js","contexts/AppContext.js","component/ListItem/ListItem.js","component/ListWrapper/ListWrapper.js","component/Loader/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","WithCollapse","Component","state","isCollapsed","setIsCollapsed","e","setState","collapseAll","bind","this","props","React","AppContext","createContext","name","countries","useContext","closeTabs","setCloseTabs","useEffect","className","onClick","length","map","item","i","ListWrapper","data","Loader","App","LIST_CONTINENTS","gql","useQuery","useState","isLoading","setIsLoading","updatedData","setUpdatedData","ApolloProvider","Provider","value","console","log","continents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAEaA,EAAS,IAAIC,IAAa,CACnCC,IAAK,sCACLC,MAAO,IAAIC,M,+ECmCAC,EArCM,SAACC,GAAD,yDAGb,aAAgB,IAAD,8BACX,gBAKJC,MAAQ,CACJC,aAAa,GAPF,EAUfC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVH,aAAc,EAAKD,MAAMC,eAZlB,EAgBfI,YAAc,SAACF,GACX,EAAKC,SAAS,CACVH,aAAa,KAhBjB,EAAKC,eAAiB,EAAKA,eAAeI,KAApB,gBACtB,EAAKD,YAAc,EAAKA,YAAYC,KAAjB,gBAHR,EAHF,0CAyBb,WACI,OACI,cAACP,EAAD,2BACQQ,KAAKC,OADb,IAEIP,YAAaM,KAAKP,MAAMC,YACxBC,eAAgBK,KAAKL,eACrBG,YAAaE,KAAKF,mBA/BjB,GACCI,IAAMV,YCCbW,EAFID,IAAME,gB,MCiDVb,SA9Cf,YAAkF,IAA9DG,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,eAAgBG,EAAgC,EAAhCA,YAAaO,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAAa,EAEzCC,qBAAWJ,GAAvCK,EAFqE,EAErEA,UAAWC,EAF0D,EAE1DA,aAQnB,OANAC,qBAAU,WACFF,GACAV,MAEL,CAACU,EAAWV,IAGX,oBAAIa,UAAU,UAAd,SAEQN,EAEQ,gCACI,mBAAGM,UAAU,eAAeC,QAAS,kBAAMjB,GAAgBD,IAA3D,SAA0EW,KAEpEX,GAAgB,oBAAIiB,UAAU,GAAd,SAEVL,GACIA,EAAUO,OAAS,EACfP,EAAUQ,KAAI,SAACC,EAAMC,GACjB,OAAKV,EAAUO,OAAS,IAAOG,EAEvB,oBAAgBJ,QAAS,kBAAMH,GAAa,IAAOE,UAAU,UAA7D,SAAuE,4BAAII,EAAKV,QAAvEW,EAAI,GAIb,oBAAgBL,UAAU,UAA1B,SAAoC,4BAAII,EAAKV,QAApCW,EAAI,MAK3B,UAMxB,U,MCjBPC,MAxBf,YAAgC,IAATC,EAAQ,EAARA,KAEnB,OACI,8BAEQA,GACIA,EAAKL,OAAS,EACVK,EAAKJ,KAAI,SAACC,EAAMC,GACZ,OACI,6BACI,cAAC,EAAD,CACIX,KAAMU,EAAKV,KACXC,UAAWS,EAAKT,aAHfU,EAAI,MASvB,Q,MCXPG,I,EAAAA,EARf,WACI,OACI,qBAAKR,UAAU,YCoDRS,MAjDf,WAEI,IAAMC,EAAkBC,YAAH,0LAYdJ,EAAQK,YAASF,EAAiB,CAACnC,WAAnCgC,KAdI,EAeuBM,oBAAS,GAfhC,mBAeJC,EAfI,KAeOC,EAfP,OAgB2BF,qBAhB3B,mBAgBJG,EAhBI,KAgBSC,EAhBT,OAiBuBJ,oBAAS,GAjBhC,mBAiBJhB,EAjBI,KAiBOC,EAjBP,KA8BX,OAXAC,qBAAU,WACHQ,IACCU,EAAeV,GACfQ,GAAa,MAElB,CAACR,IAEJR,qBAAU,WACND,GAAa,KACd,CAACD,IAGA,cAACqB,EAAA,EAAD,CAAgB3C,OAAQA,EAAxB,SACI,eAAC,EAAW4C,SAAZ,CAAqBC,MAAO,CAACvB,YAAWC,gBAAxC,UACKuB,QAAQC,IAAIf,GACb,qBAAKP,UAAU,MAAf,SAEQc,EACI,cAAC,EAAD,IAEA,cAAC,EAAD,CACIP,KAAMS,GAAeA,EAAYO,qBCpClDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e672023f.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n    uri: \"https://countries.trevorblades.com/\",\r\n    cache: new InMemoryCache()\r\n});","import React from 'react';\r\n\r\nconst WithCollapse = (Component) => \r\n    class HOC extends React.Component {\r\n\r\n        constructor () {\r\n            super ();\r\n            this.setIsCollapsed = this.setIsCollapsed.bind(this);\r\n            this.collapseAll = this.collapseAll.bind(this);\r\n        }\r\n\r\n        state = {\r\n            isCollapsed: true\r\n        }\r\n\r\n        setIsCollapsed = (e) => {\r\n            this.setState({\r\n                isCollapsed: !this.state.isCollapsed\r\n            });\r\n        }\r\n\r\n        collapseAll = (e) => {\r\n            this.setState({\r\n                isCollapsed: true\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component \r\n                    {...this.props}\r\n                    isCollapsed={this.state.isCollapsed} \r\n                    setIsCollapsed={this.setIsCollapsed} \r\n                    collapseAll={this.collapseAll}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\nexport default WithCollapse;\r\n","import React from 'react';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;","import React, { useContext, useEffect } from 'react';\r\nimport WithCollapse from '../WithCollapse/WithCollapse';\r\nimport AppContext from '../../contexts/AppContext';\r\nimport './ListItem.css';\r\n\r\nfunction ListItem({ isCollapsed, setIsCollapsed, collapseAll, name, countries }) {\r\n\r\n    const { closeTabs, setCloseTabs } = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        if (closeTabs) {\r\n            collapseAll();\r\n        }\r\n    }, [closeTabs, collapseAll]);\r\n\r\n    return (\r\n        <li className=\"level-1\">\r\n            {\r\n                name ? \r\n                    (\r\n                        <div>\r\n                            <p className=\"label toggle\" onClick={() => setIsCollapsed(!isCollapsed)}>{name}</p>\r\n                            {\r\n                                (!isCollapsed) && <ul className=\"\">\r\n                                    {\r\n                                        countries ? \r\n                                            countries.length > 0 ? \r\n                                                countries.map((item, i) => {\r\n                                                    if ((countries.length - 1) === i) {\r\n                                                        return (\r\n                                                            <li key={i + 1} onClick={() => setCloseTabs(true)} className=\"level-2\"><p>{item.name}</p></li>\r\n                                                        )\r\n                                                    } else {\r\n                                                        return (\r\n                                                            <li key={i + 1} className=\"level-2\"><p>{item.name}</p></li>\r\n                                                        )\r\n                                                    }\r\n                                                })\r\n                                                : null\r\n                                            : null\r\n                                    }\r\n                                </ul>\r\n                            }\r\n                        </div>\r\n                    )\r\n                    : null\r\n            }\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default WithCollapse(ListItem);\r\n","import React from 'react';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport './ListWrapper.css';\r\n\r\nfunction ListWrapper({ data }) {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ? \r\n                    data.length > 0 ? \r\n                        data.map((item, i) => {\r\n                            return (\r\n                                <ul key={i + 1}>\r\n                                    <ListItem \r\n                                        name={item.name} \r\n                                        countries={item.countries} \r\n                                    />\r\n                                </ul>\r\n                            )\r\n                        })\r\n                        : null\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { client } from \"./apollo/client\";\nimport { ApolloProvider, useQuery, gql } from '@apollo/client';\nimport ListWrapper from './component/ListWrapper/ListWrapper';\nimport AppContext from './contexts/AppContext';\nimport Loader from './component/Loader/Loader';\n\nfunction App() {\n\n    const LIST_CONTINENTS = gql`\n    {\n        continents {\n            name\n            countries {\n                name\n                languages\n            }\n        }\n    }\n    `;\n    \n    const {data} = useQuery(LIST_CONTINENTS, {client});\n    const [isLoading, setIsLoading] = useState(true);\n    const [updatedData, setUpdatedData] = useState();\n    const [closeTabs, setCloseTabs] = useState(false);\n\n    useEffect(() => {\n        if(data) {\n            setUpdatedData(data);\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        setCloseTabs(false);\n    }, [closeTabs]);\n\n    return (\n        <ApolloProvider client={client}>\n            <AppContext.Provider value={{closeTabs, setCloseTabs}}>\n                {console.log(data)}\n                <div className=\"App\">\n                    {\n                        isLoading ? \n                            <Loader />\n                            : \n                            <ListWrapper \n                                data={updatedData && updatedData.continents} \n                            />\n                    }\n                </div>\n            </AppContext.Provider>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}