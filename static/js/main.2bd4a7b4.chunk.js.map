{"version":3,"sources":["apollo/client.js","component/WithCollapse/WithCollapse.js","contexts/AppContext.js","component/ListInner/ListInner.js","component/ListItem/ListItem.js","component/ListWrapper/ListWrapper.js","component/Loader/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","WithCollapse","Component","state","isCollapsed","setIsCollapsed","e","setState","collapseAll","bind","this","props","React","AppContext","createContext","country","useContext","closeTabs","setCloseTabs","useEffect","className","onClick","name","languages","length","map","language","i","countries","ListWrapper","data","item","Loader","App","LIST_CONTINENTS","gql","useQuery","useState","isLoading","setIsLoading","updatedData","setUpdatedData","ApolloProvider","Provider","value","continents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bd4a7b4.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n    uri: \"https://countries.trevorblades.com/\",\r\n    cache: new InMemoryCache()\r\n});","import React from 'react';\r\n\r\nconst WithCollapse = (Component) => \r\n    class HOC extends React.Component {\r\n\r\n        constructor () {\r\n            super ();\r\n            this.setIsCollapsed = this.setIsCollapsed.bind(this);\r\n            this.collapseAll = this.collapseAll.bind(this);\r\n        }\r\n\r\n        state = {\r\n            isCollapsed: true\r\n        }\r\n\r\n        setIsCollapsed = (e) => {\r\n            this.setState({\r\n                isCollapsed: !this.state.isCollapsed\r\n            });\r\n        }\r\n\r\n        collapseAll = (e) => {\r\n            this.setState({\r\n                isCollapsed: true\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component \r\n                    {...this.props}\r\n                    isCollapsed={this.state.isCollapsed} \r\n                    setIsCollapsed={this.setIsCollapsed} \r\n                    collapseAll={this.collapseAll}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\nexport default WithCollapse;\r\n","import React from 'react';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;","import React, { useContext, useEffect } from 'react';\r\nimport WithCollapse from '../WithCollapse/WithCollapse';\r\nimport AppContext from '../../contexts/AppContext';\r\n\r\nfunction ListInner({ isCollapsed, setIsCollapsed, collapseAll, country }) {\r\n\r\n    const { closeTabs, setCloseTabs } = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        if (closeTabs) {\r\n            collapseAll();\r\n        }\r\n    }, [closeTabs, collapseAll]);\r\n\r\n    return (\r\n        <li className=\"level-2\">\r\n            <span className=\"arrow\">--</span>\r\n            <p className=\"label toggle\" onClick={() => setIsCollapsed(!isCollapsed)}>{country.name}</p>\r\n            {\r\n                (!isCollapsed) && <ul className=\"\">\r\n                    {\r\n                        country.languages ?\r\n                            country.languages.length > 0 ?\r\n                                country.languages.map((language, i) => {\r\n                                        if((country.languages.length - 1) === i) {\r\n                                            return (\r\n                                                <li key={i + 1} className=\"level-3\" onClick={() => setCloseTabs(true)}>\r\n                                                    <span className=\"arrow\">--</span>\r\n                                                    <p>{language.name}</p>\r\n                                                </li>\r\n                                            )\r\n                                        } else {\r\n                                            <li key={i + 1} className=\"level-3\">\r\n                                                <span className=\"arrow\">--</span>\r\n                                                <p>{language.name}</p>\r\n                                            </li>\r\n                                        }\r\n                                            \r\n                                    })\r\n                                : null\r\n                            : null\r\n                    }\r\n                </ul>\r\n            }\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default WithCollapse(ListInner);\r\n","import React, { useContext, useEffect } from 'react';\r\nimport WithCollapse from '../WithCollapse/WithCollapse';\r\nimport AppContext from '../../contexts/AppContext';\r\nimport ListInner from '../ListInner/ListInner';\r\nimport './ListItem.css';\r\n\r\nfunction ListItem({ isCollapsed, setIsCollapsed, collapseAll, name, countries }) {\r\n\r\n    const { closeTabs } = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        if (closeTabs) {\r\n            collapseAll();\r\n        }\r\n    }, [closeTabs, collapseAll]);\r\n\r\n    return (\r\n        <li className=\"level-1\">\r\n            {\r\n                name ? \r\n                    (\r\n                        <div>\r\n                            <p className=\"label toggle\" onClick={() => setIsCollapsed(!isCollapsed)}>{name}</p>\r\n                            {\r\n                                (!isCollapsed) && <ul className=\"\">\r\n                                    {\r\n                                        countries ? \r\n                                            countries.length > 0 ? \r\n                                                countries.map((country, i) => {\r\n                                                    return (\r\n                                                        <ListInner key={i + 1} country={country} />\r\n                                                    )\r\n                                                })\r\n                                                : null\r\n                                            : null\r\n                                    }\r\n                                </ul>\r\n                            }\r\n                        </div>\r\n                    )\r\n                    : null\r\n            }\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default WithCollapse(ListItem);\r\n","import React from 'react';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport './ListWrapper.css';\r\n\r\nfunction ListWrapper({ data }) {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                data ? \r\n                    data.length > 0 ? \r\n                        data.map((item, i) => {\r\n                            return (\r\n                                <ul key={i + 1}>\r\n                                    <ListItem \r\n                                        name={item.name} \r\n                                        countries={item.countries} \r\n                                    />\r\n                                </ul>\r\n                            )\r\n                        })\r\n                        : null\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader-wrapper\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { client } from \"./apollo/client\";\nimport { ApolloProvider, useQuery, gql } from '@apollo/client';\nimport ListWrapper from './component/ListWrapper/ListWrapper';\nimport AppContext from './contexts/AppContext';\nimport Loader from './component/Loader/Loader';\n\nfunction App() {\n\n    const LIST_CONTINENTS = gql`\n    {\n        continents {\n            name\n            countries {\n                name\n                languages {\n                    name\n                }\n            }\n        }\n    }\n    `;\n    \n    const {data} = useQuery(LIST_CONTINENTS, {client});\n    const [isLoading, setIsLoading] = useState(true);\n    const [updatedData, setUpdatedData] = useState();\n    const [closeTabs, setCloseTabs] = useState(false);\n\n    useEffect(() => {\n        if(data) {\n            setUpdatedData(data);\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        setCloseTabs(false);\n    }, [closeTabs]);\n\n    return (\n        <ApolloProvider client={client}>\n            <AppContext.Provider value={{closeTabs, setCloseTabs}}>\n                <div className=\"App\">\n                    {\n                        isLoading ? \n                            <Loader />\n                            : \n                            <ListWrapper \n                                data={updatedData && updatedData.continents} \n                            />\n                    }\n                </div>\n            </AppContext.Provider>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}