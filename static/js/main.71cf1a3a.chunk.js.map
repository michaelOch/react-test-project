{"version":3,"sources":["apollo/client.js","component/WithCollapse/WithCollapse.js","contexts/AppContext.js","component/ListItem/ListItem.js","component/ListWrapper/ListWrapper.js","component/Loader/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","WithCollapse","useState","isCollapsed","setIsCollapsed","collapseAll","e","AppContext","React","createContext","ListItem","node","useContext","closeTabs","setCloseTabs","name","countries","languages","children","setChildren","useEffect","className","onClick","length","data","ListWrapper","map","item","i","Loader","App","LIST_CONTINENTS","gql","useQuery","isLoading","setIsLoading","updatedData","setUpdatedData","ApolloProvider","Provider","value","continents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAEaA,EAAS,IAAIC,IAAa,CACnCC,IAAK,sCACLC,MAAO,IAAIC,M,wBCaAC,MAff,WAAyB,IAAD,EAEkBC,oBAAS,GAF3B,mBAEbC,EAFa,KAEAC,EAFA,KAQpB,MAAQ,CACJD,cACAE,YANgB,SAACC,GACjBF,GAAe,IAMfA,mBCTOG,EAFIC,IAAMC,gB,eCkDVC,MA9Cf,YAA6B,IAATC,EAAQ,EAARA,KAAQ,EAE6BV,IAA7CE,EAFgB,EAEhBA,YAAaC,EAFG,EAEHA,eAAgBC,EAFb,EAEaA,YAFb,EAIYO,qBAAWL,GAAvCM,EAJgB,EAIhBA,UAAWC,EAJK,EAILA,aAEXC,EAA+BJ,EAA/BI,KAAMC,EAAyBL,EAAzBK,UAAWC,EAAcN,EAAdM,UAND,EAQQf,qBARR,mBAQjBgB,EARiB,KAQPC,EARO,KAgCxB,OAtBAC,qBAAU,WACFJ,EACAG,EAAYH,GACLC,GACPE,EAAYF,KAEjB,CAACD,EAAWC,IAEfG,qBAAU,WACFP,GACAR,MAEL,CAACQ,EAAWR,IAWX,qBAAIgB,UAAU,QAAd,UACI,sBAAMA,UAAU,UAChB,mBAAGA,UAAU,eAAeC,QAXf,WACbJ,EACAd,GAAgBD,GAEhBW,GAAa,IAOb,SAAoDC,KAE1CZ,GAAgBe,GAAYA,EAASK,OAAS,GAC5C,cAAC,EAAD,CACIC,KAAMN,Q,MCzBnBO,MAhBf,YAAgC,IAATD,EAAQ,EAARA,KAEnB,OACI,qBAAKH,UAAU,kBAAf,SAEQG,GAAQA,EAAKD,OAAS,GAClBC,EAAKE,KAAI,SAACC,EAAMC,GAAP,OACL,6BACI,cAAC,EAAD,CAAUjB,KAAMgB,KADXC,EAAI,S,MCAtBC,I,EAAAA,EARf,WACI,OACI,qBAAKR,UAAU,iBAAf,SACI,qBAAKA,UAAU,cCyDZS,MAvDf,WAEI,IAAMC,EAAkBC,YAAH,yOAcdR,EAAQS,YAASF,EAAiB,CAACnC,WAAnC4B,KAhBI,EAiBuBtB,oBAAS,GAjBhC,mBAiBJgC,EAjBI,KAiBOC,EAjBP,OAkB2BjC,qBAlB3B,mBAkBJkC,EAlBI,KAkBSC,EAlBT,OAmBuBnC,oBAAS,GAnBhC,mBAmBJW,EAnBI,KAmBOC,EAnBP,KAgCX,OAXAM,qBAAU,WACHI,IACCa,EAAeb,GACfW,GAAa,MAElB,CAACX,IAEJJ,qBAAU,WACNN,GAAa,KACd,CAACD,IAGA,cAACyB,EAAA,EAAD,CAAgB1C,OAAQA,EAAxB,SACI,cAAC,EAAW2C,SAAZ,CAAqBC,MAAO,CAAC3B,YAAWC,gBAAxC,SACI,qBAAKO,UAAU,MAAf,SAEQa,EACI,cAAC,EAAD,IAGI,gCACI,4CACA,cAAC,EAAD,CACIV,KAAMY,GAAeA,EAAYK,uBCxC1DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.71cf1a3a.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n    uri: \"https://countries.trevorblades.com/\",\r\n    cache: new InMemoryCache()\r\n});","import { useState } from 'react'\r\n\r\nfunction WithCollapse() {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState(true);   \r\n\r\n    const collapseAll = (e) => {\r\n        setIsCollapsed(true);\r\n    }\r\n\r\n    return ({\r\n        isCollapsed,\r\n        collapseAll,\r\n        setIsCollapsed\r\n    })\r\n}\r\n\r\nexport default WithCollapse;\r\n\r\n","import React from 'react';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;","import React, { useContext, useState, useEffect } from 'react';\r\nimport WithCollapse from '../WithCollapse/WithCollapse';\r\nimport AppContext from '../../contexts/AppContext';\r\nimport ListWrapper from '../ListWrapper/ListWrapper';\r\nimport './ListItem.css';\r\n\r\nfunction ListItem({ node }) {\r\n\r\n    const { isCollapsed, setIsCollapsed, collapseAll } = WithCollapse();\r\n\r\n    const { closeTabs, setCloseTabs } = useContext(AppContext);\r\n\r\n    const { name, countries, languages } = node;\r\n\r\n    const [children, setChildren] = useState();\r\n\r\n    useEffect(() => {\r\n        if (countries) {\r\n            setChildren(countries);\r\n        } else if (languages) {\r\n            setChildren(languages);\r\n        }\r\n    }, [countries, languages]);\r\n\r\n    useEffect(() => {\r\n        if (closeTabs) {\r\n            collapseAll();\r\n        }\r\n    }, [closeTabs, collapseAll]);\r\n\r\n    const handleToggle = () => {\r\n        if (children) {\r\n            setIsCollapsed(!isCollapsed);\r\n        } else {\r\n            setCloseTabs(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className=\"level\">\r\n            <span className=\"arrow\"></span>\r\n            <p className=\"label toggle\" onClick={handleToggle}>{name}</p>\r\n                {\r\n                    (!isCollapsed) && children && children.length > 0 && \r\n                        <ListWrapper \r\n                            data={children} \r\n                        />\r\n                }\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport './ListWrapper.css';\r\n\r\nfunction ListWrapper({ data }) {\r\n\r\n    return (\r\n        <div className=\"content-wrapper\">\r\n            {\r\n                data && data.length > 0 && \r\n                    data.map((item, i) => (\r\n                        <ul key={i + 1}>\r\n                            <ListItem node={item} />\r\n                        </ul>\r\n                    ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader-wrapper\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { client } from \"./apollo/client\";\nimport { ApolloProvider, useQuery, gql } from '@apollo/client';\nimport ListWrapper from './component/ListWrapper/ListWrapper';\nimport AppContext from './contexts/AppContext';\nimport Loader from './component/Loader/Loader';\n\nfunction App() {\n\n    const LIST_CONTINENTS = gql`\n    {\n        continents {\n            name\n            countries {\n                name\n                languages {\n                    name\n                }\n            }\n        }\n    }\n    `;\n    \n    const {data} = useQuery(LIST_CONTINENTS, {client});\n    const [isLoading, setIsLoading] = useState(true);\n    const [updatedData, setUpdatedData] = useState();\n    const [closeTabs, setCloseTabs] = useState(false);\n\n    useEffect(() => {\n        if(data) {\n            setUpdatedData(data);\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        setCloseTabs(false);\n    }, [closeTabs]);\n\n    return (\n        <ApolloProvider client={client}>\n            <AppContext.Provider value={{closeTabs, setCloseTabs}}>\n                <div className=\"App\">\n                    {\n                        isLoading ? \n                            <Loader />\n                            : \n                            (\n                                <div>\n                                    <h3>CONTINENTS</h3>\n                                    <ListWrapper \n                                        data={updatedData && updatedData.continents} \n                                    />\n                                </div>\n                            )\n                    }\n                </div>\n            </AppContext.Provider>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}